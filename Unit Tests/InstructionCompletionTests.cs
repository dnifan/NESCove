using Microsoft.VisualStudio.TestTools.UnitTesting;
using NESCove.MOS6502.Opcodes;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Unit_Tests
{
    [TestClass]
    public class InstructionCompletionTests
    {
        private static byte[] OpcodeList = {
            0,1,5,6,8,9,0xA,0xD,0xE,0x10,0x11,0x15,0x16, 0x18, 0x19, 0x1D, 0x1E, 0x20,
                                            /* Oops */
            0x21, 0x24, 0x25, 0x26, /* 0x24, 0x25, 0x26, */ 0x28, 0x29, 0x2A, 0x2C, 0x2D, 0x2E,
            0x30, 0x31, 0x35, 0x36, 0x38, 0x39, 0x3D, 0x3E, 0x40, 0x41, 0x45, 0x46, 0x48,
            0x49, 0x4A, 0x4C, 0x50, 0x51, 0x55, 0x56, 0x58, 0x59, 0x5D, 0x5E, 0x60, 0x61,
            0x65, 0x66, 0x68, 0x69, 0x6A, 0x6C, 0x6D, 0x6E, 0x70, 0x71, 0x75, 0x76, 0x78, 
            0x79, 0x7D, 0x7E, 0x81, 0x84, 0x85, 0x86, 0x88, 0x8A, 0x8C, 0x8D, 0x8E, 0x90,
            0x91, 0x94, 0x95, 0x96, 0x98, 0x9D, 0xA0, 0xA1, 0xA2, 0xA4, 0xA5, 0xA6, 0xA8,
            0xA9, 0xAA, 0xAC, 0xAD, 0xAE, 0xB0, 0xB1, 0xB4, 0xB5, 0xB6, 0xB8, 0xB9, 0xBA,
            0xBC, 0xBD, 0xBE, 0xC0, 0xC1, 0xc4, 0xc5, 0xc6, 0xc8, 0xc9, 0xca, 0xcc, 0xcd, // Screw caps
            0xce, 0xd0, 0xd1, 0xd5, 0xd6, 0xd8, 0xd9, 0xdd, 0xde, 0xe0, 0xe1, 0xe4, 0xe5,
            0xe6, 0xe8, 0xe9, 0xec, 0xed, 0xee, 0xf0, 0xf1, 0xf5, 0xf6, 0xf8, 0xf9, 0xfd,
            0xfe // Darn, one remainder
        };

        [TestMethod]
        public void InstructionList_Integrity()
        {
            byte last = 0;
            for (int i = 0; i < OpcodeList.Length; i++)
            {
                Assert.IsTrue(OpcodeList[i] > last || last == 0, String.Format("Opcode was equal or out of order {0:X2}", OpcodeList[i]));
                last = OpcodeList[i];
            }
        }

        [TestMethod]
        public void InstructionList_Completion()
        {
            int missingCount = 0;
            for (int i = 0; i < OpcodeList.Length; i++)
            {
                IOpcode opcode = OpcodeFactory.GetOpcode(OpcodeList[i]);
                if (opcode == null)
                {
                    missingCount++;
                    Debug.WriteLine("Opcode {0:X2} is missing!", OpcodeList[i]);
                }
            }
            if (missingCount > 0)
            {
                Debug.WriteLine("Opcode completion {0:###.00}%", (100D * missingCount) / OpcodeList.Length);
            }
            Assert.AreEqual(missingCount, 0, String.Format("{0} opcode(s) are missing", missingCount));
        }
    }
}
